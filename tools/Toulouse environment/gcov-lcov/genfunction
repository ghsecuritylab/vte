#!/usr/bin/perl


#
# genfunction
#
# This script is subject to the terms and conditions of the GNU General Public
# License.  
#
# Copyright (C) August,2005 by Giabicani Bruno
#
#

use strict 'vars';

#Declaration des variables
#
my $api=</local/linux_baseport/REF/lcov/api.info>; #fichier de reference des API
my $prog;						#variable1
my $prog2;						#variable2
my $prog3;						#variable3
my @tab;						#tab in which *.c file instrumented by GCOV are listed by absolute way
my @tab2;						#tableau2

my @tab_rate=();					#tab 
my @driver_rate=();					#tab 
my @fun_name=();					#tab in which *.c file instrumented by GCOV are listed by relative way
my $tab3;						#variable4
my $driver;						#name of driver stored in temporary variable
my $fun_hit=0;						#variable 
my $fun_found=0;					#variable 
my $fun_hit2=0;						#variable 
my $fun_found2=0;					#variable 
my $flag=0;						#variable6

my $line;						#variable7
my $line2;						#variable8
my $rate;						#variable9
my $rate2;						#variable10

my $ref=0;
my $index=0;
my $index2=0;
my $ref2=0;
my $driver_ref;
my $driver_ref2;
my $tag=0;
my $driver_tag=0;
my $driver_tag2=0;
my $CurrentDriver;
my $CurrentDriver2;

my $out='coverage_report_fullfunction.txt';				#output file name

our $gcov_tool="arm_v6_vfp_le-gcov";			#GCOV command
	

open(STDOUT,"|pwd");					#directory in which GCOV works
open (COM,'find . -name "*.*" -print|');		#work directory listing *.c, *.gcno, *.gcda files

################################################# use GCOV script on source file#######################################		
@tab = <COM>;						#for each *.c file instrumented par GCOV...
foreach $prog (@tab) {
	chomp($prog);					
	@tab2 = split("/",$prog);			#file call tree stored in tab2 for each *.c
	foreach $prog2 (@tab2) {
	chomp($prog2);
	}
	$tab3 = $tab2[$#tab2];				#store *.c name in tab3 variable
	pop(@tab2);
	$driver=join('/',@tab2);			#store the driver name in $driver variable
	system("ln", "-s", $prog, 			#create a symbolic link from source directory to current directory for each *.c, *.gcno, *.gcda file
		       $tab3)
			and die ("ERROR: cannot create link\n");
	
	unless(open(OUT,">>coverage_report_fullfunction.txt")) {	#open output file
		print("Erreur de creation ${prog}.filtered ($!)\n");}
		
	foreach($tab3)					#for each file...			
	 {
	 	if (/^(\S+)\.c$/)			#for each *.c file
		{
			print OUT "\n\n";
			print OUT "**************Coverage for $driver****************************************\n";
			print OUT "**************Function coverage for file $tab3****************************************\n";
			open(OUT,"|arm_v6_vfp_le-gcov -f $tab3 >>coverage_report_fullfunction.txt"); #gcov script output is coverage_report.txt
			
		}
	}
}
################################################# END use GCOV script on source file#######################################

################################################# coverage rate calculation ###############################################
unless(open(INPUT,$out)) {				#open coverage report
		print("Erreur d'ouverture $out ($!)\n");}
unless(open(OUTPUT,">$out.filtered")) {			#create a new coverage report
		print("Erreur d'ouverture $out ($!)\n");}

while (<INPUT>) {					#while coverage report is not empty...
	chomp($_);
	$line = $_;					#current line is current variable
	
	# Switch statement
		foreach ($line)				#for each line of coverage report file
		{
			#if current line is "**************Coverage for $driver****************************************"
			if (/^\*+(\S+)\s+(\S+)\s+(\S+)\*+\*$/) 		
			{
					if ($driver_tag!=0 && $3 ne $CurrentDriver)
					{
						$CurrentDriver=$3;
						if ($fun_found2 != 0)
						{
							$rate2 = $fun_hit2*100/$fun_found2;
							#print "$rate2\n";
							push(@driver_rate,$rate2);
							$driver_ref=\@driver_rate;
							$fun_found2=0; $fun_hit2=0;
						}
						else 
						{
						$rate2=0;push(@driver_rate,$rate2);
						#print "$rate2\n";
						}	
					}
				$driver_tag=1;
				
			}						
			#END if current line "**************Coverage for $driver****************************************"
			
			#if current line "**************Function coverage for file $tab3****************************************"
			if (/^\*+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\*+\*$/) 
			{
			
				if ($tag!=0)
				{
					if ($fun_found != 0)
					{
						$rate = $fun_hit*100/$fun_found;
						push(@tab_rate,$rate);
						$ref=\@tab_rate;
					}
					else 
					{
						$rate = 0;push(@tab_rate,$rate);
					}
				}
				$fun_found=0; $fun_hit=0;
				$tag=1;
			}
			#END if current line "**************Function coverage for file $tab3****************************************"
			
			#if current line begins with Function
			elsif (/^Function\s+.(\S+).$/)
				{
					
					@fun_name=($1);				#store function name in temporary function tab
					foreach $prog3 (@fun_name) {		#for each function name
						chomp($prog3);
						unless(open(IN,$api)) {		#open API reference file
						print("Erreur d'ouverture $api ($!)\n");
						}
						
						while (<IN>) {			#while current line of API reference file is not empty
						chomp($_);
						$line2 = $_;			#current line is current variable
					
					 	#Switch statement
						foreach ($line2)		#for each line of API reference file
							{
								if (/^[^\*]+/) 	#if current line doesn't begin with a *
								{
									#if current line begins with a character
									if (/^(.*)$/)
									{	
										#if current function is found in API reference list
										if ($prog3 eq $1) {$flag=1;last;}
										#END if current function is found in API reference list
									}
									#END if current line begins with a character
								}
								#END if current line doesn't begin with a *
								
							}	
						}
						close(IN);		#close API reference file
				
					}
				}
			#END if current line begins with Function	
			
			#if current line begins with Lines	
			elsif ((/^Lines\s+(\S+):(\d).+/) && $flag==1)
				{
					$fun_found+=1;
					$fun_found2+=1;
					if ($2!=0) {$fun_hit+=1;$fun_hit2+=1;}	
					$flag=0;last;
				}
			#END if current line begins with Function
		}	
}
#for the last file
if ($fun_found != 0 && $tag==1)
{
	$rate = $fun_hit*100/$fun_found;
	push(@tab_rate,$rate);
	$ref=\@tab_rate;
}
else {$rate = 0;push(@tab_rate,$rate);}

#for the last driver
if ($fun_found2 != 0 && $driver_tag==1)
{
	$rate2 = $fun_hit2*100/$fun_found2;
	push(@driver_rate,$rate2);
	$driver_ref=\@driver_rate;
}
else {$rate2 = 0;push(@driver_rate,$rate2);}
		
close(INPUT);							#close coverage report

################################################# END coverage rate calculation ###############################################


################################################# coverage rate included in coverage report  ###############################################
unless(open(INPUTFILE,$out)) {					#re-opening of coverage report 
		print("Erreur d'ouverture $out ($!)\n");}
	
while (<INPUTFILE>) {						#while coverage report is not empty
	chomp($_);
	$line = $_;						#current line is current variable
	
	# Switch statement
	foreach ($line)						#for each line of coverage report file
		{
			#if current line is "**************Coverage for $driver****************************************"
			if (/^\*+(\S+)\s+(\S+)\s+(\S+)\*$/)
			{
				if ($3 ne $CurrentDriver2)
				{
					$CurrentDriver2=$3;
					$index2+=1;
				}
				
				$driver_ref2=$driver_ref->[$index2];
				print OUTPUT "\n";
				print OUTPUT "$line\n";
				print OUTPUT "**************** #$index2 :Driver coverage rate $driver_ref2 %\n";
			}
			#END if current line is "**************Coverage for $driver****************************************"
			
			#if current line "**************Function coverage for file $tab3****************************************"
			elsif (/^\*+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\*+\*$/) 
			{
				
				$ref2=$ref->[$index];
				$index+=1;
				print OUTPUT "$line\n";	
				print OUTPUT "**************** #$index :Function coverage rate $ref2 %\n";
			}
			#if current line "**************Function coverage for file $tab3****************************************"
			
			#if current line begins with Function
			elsif (/^Function\s+.(\S+).$/)
				{
					
					@fun_name=($1);				#store function name in temporary function tab
					foreach $prog3 (@fun_name) {		#for each function name
					
						chomp($prog3);
						
						unless(open(IN,$api)) {		#open API reference file
						print("Erreur d'ouverture $api ($!)\n");
						}
						
						while (<IN>) {			#while current line of API reference file is not empty
						chomp($_);
						$line2 = $_;			#current line is current variable
					
					 	#Switch statement
						foreach ($line2)		#for each line of API reference file
							{
								#if current line doesn't begin with a *
								if (/^[^\*]+/) 	
								{
									#if current line begins with a character
									if (/^(.*)$/)
									{
									#if current function is found in API reference list
									if ($prog3 eq $1) {$flag=1;print OUTPUT "$prog3\n";last;}
									#END if current function is found in API reference list
									}
									#END if current line begins with a character
								}
								#END if current line doesn't begin with a *
							}	
						}
						close(IN);			#close API reference file
				
					}
					
				}
			#END if current line begins with Function
			
			#if current line begins with Lines
			elsif ((/^Lines\s+(\S+):(\d).+/) && $flag==1)
				{
					print OUTPUT "$line\n";	$flag=0;last;
				}
			
			#END if current line begins with Lines
			
			#elsif ($flag!=0)
			#{
			#	print OUTPUT "$line\n"; $flag=0;last;
			#}
			else {print OUTPUT "";}
		}
		
}		
close(INPUTFILE);
close(OUTPUT);
close(OUT);
close(COM);
################################################# END coverage rate included in coverage report  ###############################################
